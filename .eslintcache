[{"/home/taveesh/Desktop/QoSMon/qosmon-app/src/index.js":"1","/home/taveesh/Desktop/QoSMon/qosmon-app/src/App.js":"2","/home/taveesh/Desktop/QoSMon/qosmon-app/src/reportWebVitals.js":"3","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/Header.js":"4","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/login.js":"5","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/logout.js":"6","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/research.js":"7","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/usage.js":"8","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/job.js":"9","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/signup.js":"10","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/homepage/Login.js":"11","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/homepage/SignUp.js":"12","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/usage/NetworkUsage.js":"13","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/usage/charts/PieChartNetUsage.js":"14","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/measurements/MeasurementForm.js":"15","/home/taveesh/Desktop/QoSMon/qosmon-app/src/utils/RandomColors.js":"16","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/results/JobCard.js":"17","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/results.js":"18","/home/taveesh/Desktop/QoSMon/qosmon-app/src/setupTests.js":"19","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/MeasurementList.js":"20","/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/results/JobResult.js":"21"},{"size":593,"mtime":1610713856199,"results":"22","hashOfConfig":"23"},{"size":2852,"mtime":1610998617336,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1610705621781,"results":"25","hashOfConfig":"23"},{"size":948,"mtime":1610998047251,"results":"26","hashOfConfig":"23"},{"size":709,"mtime":1610890881074,"results":"27","hashOfConfig":"23"},{"size":534,"mtime":1610722992174,"results":"28","hashOfConfig":"23"},{"size":1577,"mtime":1610981259028,"results":"29","hashOfConfig":"23"},{"size":1616,"mtime":1610896770951,"results":"30","hashOfConfig":"23"},{"size":2882,"mtime":1611000338897,"results":"31","hashOfConfig":"23"},{"size":329,"mtime":1610723018755,"results":"32","hashOfConfig":"23"},{"size":2883,"mtime":1610814158839,"results":"33","hashOfConfig":"23"},{"size":3670,"mtime":1610718466622,"results":"34","hashOfConfig":"23"},{"size":512,"mtime":1610709303464,"results":"35","hashOfConfig":"23"},{"size":744,"mtime":1610711871699,"results":"36","hashOfConfig":"23"},{"size":6884,"mtime":1610996087028,"results":"37","hashOfConfig":"23"},{"size":381,"mtime":1610711819390,"results":"38","hashOfConfig":"23"},{"size":1453,"mtime":1610965235549,"results":"39","hashOfConfig":"23"},{"size":2409,"mtime":1611001233324,"results":"40","hashOfConfig":"23"},{"size":241,"mtime":1610705621781,"results":"41","hashOfConfig":"23"},{"size":843,"mtime":1611001062696,"results":"42","hashOfConfig":"23"},{"size":1123,"mtime":1610993008269,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1e34mdo",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/taveesh/Desktop/QoSMon/qosmon-app/src/index.js",[],["89","90"],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/App.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/reportWebVitals.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/Header.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/login.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/logout.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/research.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/usage.js",["91"],"import { useState, useEffect } from \"react\";\nimport \"../styles/pages/usage.css\";\nimport NetworkUsage from \"../components/usage/NetworkUsage\";\nimport PieChartNetUsage from \"../components/usage/charts/PieChartNetUsage\";\nimport { Row, Col, Container } from \"react-bootstrap\";\nimport Header from \"../components/Header\";\n\nexport default function Usage(props) {\n  const [data, setData] = useState([\n    {\n      name: \"com.facebook.xyz\",\n      tx: 50,\n      rx: 60,\n    },\n    {\n      name: \"com.twitter.xyz\",\n      tx: 150,\n      rx: 80,\n    },\n    {\n      name: \"com.youtube.xyz\",\n      tx: 310,\n      rx: 200,\n    },\n    {\n      name: \"com.netflix.xyz\",\n      tx: 500,\n      rx: 160,\n    },\n    {\n      name: \"com.amazon.xyz\",\n      tx: 200,\n      rx: 350,\n    },\n  ]);\n\n  const links = [{ to: \"/logout\", name: \"Log Out\" }];\n\n  useEffect(() => {\n    localStorage.setItem(\"user\", JSON.stringify(props.userState.user));\n  });\n\n  return (\n    <Container>\n      <Header links={links} />\n      <Row className=\"layout\">\n        <Row className=\"justify-content-md-center\">\n          <h1>App Usage</h1>\n        </Row>\n        <Row>\n          <Col md=\"4\">\n            <NetworkUsage data={data} />\n          </Col>\n          <Col md=\"8\" className=\"chartWrapper\">\n            <div className=\"pieChart\">\n              <h3>Upload</h3>\n              <PieChartNetUsage data={data} dataKey=\"tx\" />\n            </div>\n            <div className=\"pieChart\">\n              <h3>Download</h3>\n              <PieChartNetUsage data={data} dataKey=\"rx\" />\n            </div>\n          </Col>\n        </Row>\n      </Row>\n    </Container>\n  );\n}\n","/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/job.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/signup.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/homepage/Login.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/homepage/SignUp.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/usage/NetworkUsage.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/usage/charts/PieChartNetUsage.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/measurements/MeasurementForm.js",["92","93"],"import React, { useState, useRef, Fragment } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { Col } from \"react-bootstrap\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport axios from \"axios\";\n\nexport default function MeasurementForm(props) {\n  const path = props.location.pathname;\n  let type = path.substring(path.indexOf(\"/\", 2) + 1);\n  if (type.startsWith(\"/\")) type = \"ping\";\n\n  const [start_date, setStartDate] = useState(\"\");\n  const [start_time, setStartTime] = useState(\"\");\n  const [end_date, setEndDate] = useState(\"\");\n  const [end_time, setEndTime] = useState(\"\");\n  const [interval_sec, setIntervalSec] = useState(1);\n  const [count, setCount] = useState(1);\n  const [priority, setPriority] = useState(5);\n  const [target, setTarget] = useState(\"\");\n  const [node_count, setNodeCount] = useState(\"\");\n  const [job_interval, setJobInterval] = useState(\"\");\n  const [tcp_speed_test, setTcpSpeedTest] = useState(\"down\");\n  const measurementForm = useRef(null);\n\n  const getTimestamp = (d, t) => {\n    return d + \"T\" + t + \":00.000Z\";\n  };\n\n  const getJobKey = () => {\n    return (\n      Math.random().toString(36).substring(2, 16) +\n      Math.random().toString(36).substring(2, 16)\n    );\n  };\n\n  const notify = (message, isSuccess) => {\n    if (isSuccess) {\n      toast.success(message, {\n        position: toast.POSITION.TOP_CENTER,\n      });\n    } else {\n      toast.error(message, {\n        position: toast.POSITION_TOP_CENTER,\n      });\n    }\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    let payload = {\n      job_description: {\n        measurement_description: {\n          type: type,\n          key: getJobKey(),\n          start_time: getTimestamp(start_date, start_time),\n          end_time: getTimestamp(end_date, end_time),\n          count: count,\n          interval_sec: interval_sec,\n          priority: priority,\n          parameters: {\n            target: target,\n            server: \"null\",\n            direction: tcp_speed_test,\n          },\n        },\n        node_count: node_count,\n        job_interval: job_interval,\n      },\n      request_type: \"SCHEDULE_MEASUREMENT\",\n      user_id: props.email,\n    };\n    axios\n      .post(`${process.env.REACT_APP_API_URL}/schedule`, payload, {\n        headers: {\n          Authorization: \"Bearer \" + props.jwt,\n        },\n      })\n      .then((res) => {\n        notify(\"Job scheduled\", true);\n      })\n      .catch((error) => {\n        if (error.response) {\n          notify(error.response.data.detail, false);\n        } else {\n          notify(\"Server error\", false);\n        }\n      });\n    measurementForm.current.reset();\n  };\n\n  const TcpForm = (\n    <Form.Group controlId=\"tcpRadio\">\n      <Form.Check\n        inline\n        type=\"radio\"\n        id=\"tcpRadioUp\"\n        label=\"Uplink\"\n        checked={tcp_speed_test === \"up\"}\n        onChange={(e) => setTcpSpeedTest(\"up\")}\n        required\n      />\n      <Form.Check\n        inline\n        type=\"radio\"\n        id=\"tcpRadioDown\"\n        label=\"Downlink\"\n        checked={tcp_speed_test === \"down\"}\n        onChange={(e) => setTcpSpeedTest(\"down\")}\n        required\n      />\n    </Form.Group>\n  );\n\n  const AddressForm = (\n    <Form.Group controlId=\"address\">\n      <Form.Label> Web Address </Form.Label>\n      <Form.Control\n        type=\"text\"\n        placeholder=\"www.example.com\"\n        onChange={(e) => setTarget(e.target.value)}\n        required\n      />\n    </Form.Group>\n  );\n  let measurement = null;\n  switch (type) {\n    case \"ping\":\n      measurement = \"Ping\";\n      break;\n    case \"dns_lookup\":\n      measurement = \"DNS Lookup\";\n      break;\n    case \"traceroute\":\n      measurement = \"Traceroute\";\n      break;\n    case \"http\":\n      measurement = \"HTTP Download\";\n      break;\n    case \"tcp_speed_test\":\n      measurement = \"TCP Speed Test\";\n      break;\n    default:\n      break;\n  }\n  return (\n    <Fragment>\n      <h2>Schedule : {measurement}</h2>\n      <br/>\n      <Form onSubmit={onSubmit} ref={measurementForm}>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"nodeCount\">\n            <Form.Label>Node Count </Form.Label>\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Node Count\"\n              onChange={(e) => setNodeCount(e.target.value)}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"jobInterval\">\n            <Form.Label>Job Interval </Form.Label>\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Job Interval\"\n              onChange={(e) => setJobInterval(e.target.value)}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Group controlId=\"priority\">\n          <Form.Label>Priority</Form.Label>\n          <Form.Control\n            as=\"select\"\n            onChange={(e) => setPriority(e.target.value)}\n            required\n          >\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n            <option>4</option>\n            <option>5</option>\n            <option>6</option>\n            <option>7</option>\n            <option>8</option>\n            <option>9</option>\n            <option>10</option>\n          </Form.Control>\n        </Form.Group>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"startDate\">\n            <Form.Label>Start Date </Form.Label>\n            <Form.Control\n              type=\"date\"\n              placeholder=\"Start Date\"\n              onChange={(e) => setStartDate(e.target.value)}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"startTime\">\n            <Form.Label>Start Time </Form.Label>\n            <Form.Control\n              type=\"time\"\n              placeholder=\"Start Time\"\n              onChange={(e) => setStartTime(e.target.value)}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"endDate\">\n            <Form.Label>End Date </Form.Label>\n            <Form.Control\n              type=\"date\"\n              placeholder=\"End Date\"\n              onChange={(e) => setEndDate(e.target.value)}\n              required\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"startTime\">\n            <Form.Label>End Time </Form.Label>\n            <Form.Control\n              type=\"time\"\n              placeholder=\"End Time\"\n              onChange={(e) => setEndTime(e.target.value)}\n              required\n            />\n          </Form.Group>\n        </Form.Row>\n\n        {type === \"tcp_speed_test\" ? TcpForm : AddressForm}\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n      <ToastContainer autoClose={3000} />\n    </Fragment>\n  );\n}\n","/home/taveesh/Desktop/QoSMon/qosmon-app/src/utils/RandomColors.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/results/JobCard.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/pages/results.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/setupTests.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/MeasurementList.js",[],"/home/taveesh/Desktop/QoSMon/qosmon-app/src/components/results/JobResult.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":9,"column":16,"nodeType":"100","messageId":"101","endLine":9,"endColumn":23},{"ruleId":"98","severity":1,"message":"102","line":17,"column":24,"nodeType":"100","messageId":"101","endLine":17,"endColumn":38},{"ruleId":"98","severity":1,"message":"103","line":18,"column":17,"nodeType":"100","messageId":"101","endLine":18,"endColumn":25},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'setData' is assigned a value but never used.","Identifier","unusedVar","'setIntervalSec' is assigned a value but never used.","'setCount' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]